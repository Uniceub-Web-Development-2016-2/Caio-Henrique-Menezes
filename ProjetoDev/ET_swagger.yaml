# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: EasyTrip
  description: Aplicação feita para auxiliar e facilitar o planejamento de viagens.
  version: "1.0.0"
# the domain of the service
host: api.easytrip.com
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json

#caminho dos métodos
paths:
  
  /user:
    post:
      tags:
      - User
      summary: Sign Up New User
      operationId: NewUser
      consumes:
        - application/json
      produces:
        - application/json
      description: The Log User submit an array of information of the user to register it
      parameters:
        - name: User
          in: body
          description: User's informations
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /me/{user_id}:
    get:
      tags:
        - User
      summary: View Myself Profile
      operationId: viewMe      
      consumes:
        - application/json
      produces:
        - application/json
      description: The User Profile endpoint returns information about the EasyTrip user that has authorized with the application.
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
      
      responses:
        200:
          description: An array of informations about the user registered on the system.
          schema:
            type: string
            items:
              $ref: '#/definitions/Profile'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
    put:
      tags:
      - User
      summary: Edit Myself Profile
      description: ""
      operationId: editMe
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
      responses:
        200:
          description: An array of informations about the user registered on the system.
          schema:
            type: string
            items:
              $ref: '#/definitions/Profile'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
    delete:
      tags:
      - User
      summary: Delete Myself Profile 
      description: ""
      operationId: deleteMe
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'  
    
    
  #Admin Functions
  /user/{user_id}:
    post:
      tags:
      - User
      summary: Sign Up New User
      description: ""
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
          
        - name: User
          in: body
          description: User's first name
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: OK
  
    get:
      tags:
        - User
      summary: Get a specific User
      description: ""
      operationId: getUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'  
            
    put:
      tags:
        - User
      summary: Update an existing specific User
      description: ""
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: User's ID
          required: true
          type: number
      responses:
        200:
          description: An array of informations about the user registered on the system.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
    delete:
      tags:
        - User
      summary: Delete a specific User
      description: ""
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: User's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      

            
  /places:
    get:
      summary: List Places
      description: |
        Esta requisição retornará uma lista de lugares próximos ao usuário,
        oferecidos pelo EasyTrip, baseado em sua localização. O retorno 
        mostrará nome, distância, rotas e informações sobre o lugar. Além
        de um conjunto de fotos
      parameters:
        - name: latitude
          in: query
          description: Latitude component of location.
          required: true
          type: number
          format: double
        - name: longitude
          in: query
          description: Longitude component of location.
          required: true
          type: number
          format: double
      tags:
        - Place
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'  
  
  /places/findByName{local_name}:
    get: 
      tags:
        - Place
      summary: Get a Place by name
      description: ""
      operationId: getPlaceByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: local_name
          description: Local's Name
          required: true
          type: string
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /places/byDistance{distance}:
    get:
      tags:
        - Place
      summary: Get a Place by distance from User
      description: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: distance
          description: Distance from User
          required: true
          type: string
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
          
  /places/findCountry{country_name}:
    get: 
      tags:
        - Place
      summary: Get a Place by name
      description: ""
      operationId: getCountryByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: country_name
          description: Local's Name
          required: true
          type: string
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    

  /places/findState{state_name}:
    get: 
      tags:
        - Place
      summary: Get a State by name
      description: ""
      operationId: getStateByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: state_name
          description: Local's Name
          required: true
          type: string
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/State'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /places/findCity{city_name}:
    get: 
      tags:
        - Place
      summary: Get a Place by name
      description: ""
      operationId: getCityByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: city_name
          description: Local's Name
          required: true
          type: string
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  #Admin Functions          
  /places/{place_id}: 
    get:
      tags:
      - Place
      summary: Get a specific Place
      description: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  
    post:
      tags: 
      - Place
      summary: Register new Places
      description: ""
      operationId: newPlace
      parameters:
      - in: path
        name: place_id
        description: Place's ID
        required: true
        type: number
        
      - in: body
        name: Place
        description: Place's informations
        required: true
        schema:
          $ref: '#/definitions/Place'
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
    put:
      tags:
      - Place
      summary: Update an existing specific Place
      description: ""
      operationId: updatePlace
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
            
    delete:
      tags:
      - Place
      summary: Delete a specific Place
      description: ""
      operationId: deletePlace
      parameters:
        - name: place_id
          in: path
          description: Place's ID
          required: true
          type: number
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'             
  
  #Admin Functions
  /place/photos/{place_id}:
    get:
      tags:
      - Place
      summary: Search Places' photos
      description: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
          
        - name: Photo
          in: body
          description: Places' photos
          required: true
          schema:
            $ref: '#/definitions/Photo'
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Photo'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'             
            
    post:
      tags:
      - Place
      summary: Create Place's photos
      description: ""
      consumes:
        - application/json
      produces:
        - application/json      
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
          
        - name: Photo
          in: body
          description: Places' photos
          required: true
          schema:
            $ref: '#/definitions/Photo'
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Photo'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
    put:
      tags:
      - Place
      summary: Update an existing specific Places' photos
      description: ""
      operationId: updatePlacesPhotos
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
          
        - name: Photo
          in: body
          description: Places' photos
          required: true
          schema:
            $ref: '#/definitions/Photo'      
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Photo'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'        
            
    delete:
      tags:
      - Place
      summary: Delete a specific Places' Photo
      description: ""
      operationId: deletePlacePhoto
      parameters:
        - in: path
          name: place_id
          description: Place's ID
          required: true
          type: number
          
        - name: Photo
          in: body
          description: Places' photos
          required: true
          schema:
            $ref: '#/definitions/Photo'
      responses:
        200:
          description: Succesful!
          schema:
            type: array
            items:
              $ref: '#/definitions/Photo'
        403:
          description: Forbidden action.
          schema:
            $ref: '#/definitions/Forbidden'
        501:
          description: Not implemented method
          schema:
            $ref: '#/definitions/NotImplemented'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'             
      
  /route:
    get:
      tags:
        - Route
      summary: Enable Routes
      description: The Enable Routes returns an array of routes is enabled for user get to some place.
      operationId: getRoutes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Destination
          description: Destionation's place.
          required: true
          schema:
            $ref: '#/definitions/Destination'
 
      responses:
        200:
          description: Routes information for a given localization.
          schema:
            $ref: '#/definitions/Route'
        default:
            description: asdasdasdasd
            schema:
              $ref: '#/definitions/Error'
              
  /estimates/time:
    get:
      summary: Time Estimates
      description: The Time Estimates endpoint returns an estimate time at a given location and destination, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate.
      parameters:
        - name: start_latitude
          in: query
          description: Latitude component of start location.
          required: true
          type: number
          format: double
        - name: start_longitude
          in: query
          description: Longitude component of start location.
          required: true
          type: number
          format: double
        - name: customer_uuid
          in: query
          type: string
          format: uuid
          description: Unique customer identifier to be used for experience customization.
        - name: product_id
          in: query
          type: string
          description: Unique identifier representing a specific product for a given latitude & longitude.
      tags:
        - Route
      responses:
        200:
          description: An array of places
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

#Definições dos objetos
definitions:

  User:
    type: object
    required:
      - first_name
      - username
      - password
      - email
      - account_type
    properties:
      user_id:
        type: number
        description: Unique identifier representing a specific user | identificador único de um usuário Ex - CPF, RG
      birth_date:
        type: string
        format: date
        description: User's birthday date | Data de aniversário do usuário
      first_name:
        type: string
        description: User's first name | Primeiro nome do usuário
      last_name:
        type: string
        description: User's last name | Sobrenome do usuário
      username:
        type: string
        description: User's username | Username do usuário
      password:
        type: string
        format: md5
        description: User's password | Senha do usuário
      email:
        type: string
        description: User's email | Email do usuário
      phone:
        type: string
        description: User's phone | Telefone do usuário
      account_type:
        type: string
        description: User's account type | Tipo da conta do usuário. Ex - normal, admin
        
  Profile:
    type: object
    properties:
      user_id:
        type: number
        description: Unique identifier representing a specific user | identificador único de um usuário Ex - CPF, RG
      first_name:
        type: string
        description: User's first name | Primeiro nome do usuário
      last_name:
        type: string
        description: User's last name | Sobrenome do usuário
      email:
        type: string
        description: User's email | Email do usuário
      picture:
        type: string
        description: User's profile image | Imagem do usuário.
  
  Place:
    type: object
    required:
    - place_id
    - local_name
    - latitude_point
    - longitude_point
#    - local
    properties:
      place_id:
        type: number
        description: Unique identifier representing a specific place for a given latitude & longitude. | Identificador único representando um lugar específico, dada uma latitude e longitude.
      description:
        type: string
        description: Description of the place. | Descrição do Local
      latitude_point:
        type: number
        description: Places's latitude point
      longitude_point: 
        type: number
        description: Place's longitude point
        format: int32
      local_name:
        type: string
        description: Display name of the place. | Nome do Local
#      local:
#        type: string
#        description: a place based on user's Latitude e Longitude | Um local baseado na Latitude e Longitude do usuário
      state:
        type: string
        description: Place's state. For example - São Paulo, Rio de Janeiro. | Estado do Local. Ex - São Paulo, Rio de Janeiro.
      image:
        type: string
        description: Image URL representing the place. | Imagem que represente o Local
  
  Destination:
    type: object
    required:
    - place_id
    - local_name
    - latitude_point
    - longitude_point
#    - local
    properties:
      place_id:
        type: number
        description: Unique identifier representing a specific place for a given latitude & longitude. | Identificador único representando um lugar específico, dada uma latitude e longitude.
      description:
        type: string
        description: Description of the place. | Descrição do Local
      latitude_point:
        type: number
        description: Places's latitude point
      longitude_point: 
        type: number
        description: Place's longitude point
        format: int32
      local_name:
        type: string
        description: Display name of the place. | Nome do Local
#      local:
#        type: string
#        description: a place based on user's Latitude e Longitude | Um local baseado na Latitude e Longitude do usuário
      state:
        type: string
        description: Place's state. For example - São Paulo, Rio de Janeiro. | Estado do Local. Ex - São Paulo, Rio de Janeiro.
      image:
        type: string
        description: Image URL representing the place. | Imagem que represente o Local
  
  Route:
    type: object
    required:
    - route_id
    - id_place1
    - id_place2
    properties:
      route_id:
        type: string
        description: Unique identifier representing a specific route between two places using a highway. | Identificador único representando uma rota específica entre dois locais, utilizando uma rodovia.
      id_place1:
        type: string
        description: Unique identifier representing a specific place '#1'. 
      id_place2:
        type: string
        description: Unique identifier representing a specific place '#2'.
      estimate:
        type: string
        description: The distance estimated between 2 places, already formated on the String | A distância estimada entre 2 locais, já formatada numa String
      low_estimate:
        type: number
        description: Lower bound of the estimated ditance | O limite inferior da distância estimada
      high_estimate:
        type: number
        description: Upper bound of the estimated ditance. | O limite superior da distância estimada.
        
  Photo:
    type: object
    required:
    - id_place
    - photo
    properties:
      id_place:
        type: number
        description: Unique identifier of place's photos.
      photo: 
        type: object
        description: Photos uploaded. Can be user, place, accomodation, services or products photos.
      description:
        type: string
        description: Description of photos.
        
  Country:
    type: object
    properties:
      country_id:
        type: number
        description: Country's id number
      country_name:
        type: string
        description: Country's name
      country_ini:
        type: string
        description: Country's initials
    
  State:
    type: object
    properties:
      state_id:
        type: number
        description: State's id number
      state_name:
        type: string
        description: State's name
      stete_ini:
        type: string
        description: State's initials
        
  City:
    type: object
    properties:
      city_id:
        type: number
        description: City's id number
      city_name:
        type: string
        description: City's name
      city_ini:
        type: string
        description: City's initials
        
      
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
        
  Forbidden:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
        
  NotImplemented:
    type: object
    properties: 
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
